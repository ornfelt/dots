----------------------------------------------------------------------------------
https://www.debian.org/releases/bookworm/debian-installer/
https://archlinux.org/download/

Follow graphical install, then:

su - / sudo su
Enter host passwd, then apt install sudo
usermod -aG sudo jonas
maybe also do: usermod -aG audio,video jonas
apt install network-manager
sudo nmcli device wifi connect OWNIT-B1C0 password XXX
apt install neovim
EDITOR=nvim visudo
At the end of the /etc/sudoers file add this line: 
jonas     ALL=(ALL) NOPASSWD:ALL
exit
reboot

Update sources list:
https://www.itzgeek.com/how-tos/linux/debian/setup-debian-11-official-repository-in-sources-list-etc-apt-sources-list.html

Add contrib non-free to every line, uncomment lines with deb-src, then sudo apt update
For newer debian versions, it suffices to just uncomment the deb-src lines...

*OBS! If intel wifi, then you might have to:
sudo apt install iwlwifi and reboot...

******************************************
curl -o install.txt https://raw.githubusercontent.com/archornf/dotfiles/master/installation/deb_install.txt
wget -O install.txt https://raw.githubusercontent.com/archornf/dotfiles/master/installation/deb_install.txt
******************************************

# TrinityCore:
# For latest mysql-apt repository, check url from https://dev.mysql.com/downloads/repo/apt/
wget https://dev.mysql.com/get/mysql-apt-config_0.8.29-1_all.deb -O /tmp/mysql-apt-config_all.deb
sudo DEBIAN_FRONTEND=noninteractive dpkg -i /tmp/mysql-apt-config_all.deb
# Not needed?
sudo update-alternatives --install /usr/bin/cc cc /usr/bin/clang 100
sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang 100

python3 -m venv .venv
source .venv/bin/activate
Then:
python3 -m pip install -r requirements.txt

Or:
pip install xyz --break-system-packages

Or (use this):
Add this to your ~/.config/pip/pip.conf file:
[global]
break-system-packages = true

pip3 install bs4 requests ocrspace pytesseract pynvim i3ipc pyperclip

******************************************
# Other stuff

git clone https://github.com/jmattheis/gruvbox-dark-gtk ~/.themes/gruvbox-dark-gtk
Set gruvbox-dark theme through lxappearance (should appear through dmenu)

# sudo cp /etc/X11/xinit/xinitrc ~/.xinitrc
# sudo localectl set-x11-keymap se (then sudo reboot)

git clone polybar themes and run the starting script
then copy files from dotfiles to .config
git clone --depth=1 https://github.com/adi1090x/polybar-themes.git
cd polybar-themes
chmod +x setup.sh
./setup.sh

If JetBrainsMono can't be installed from apt:
cd ~/Downloads && wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/JetBrainsMono.zip
mkdir -p ~/.local/share/fonts/ && unzip JetBrainsMono.zip -d ~/.local/share/fonts/
fc-cache -fv

Manual install:
https://www.nerdfonts.com/font-downloads
Download Jetbrains from above and copy the files to either:
~/.fonts/
or:
~/.local/share/fonts/
restart or use: fc-cache -fv

install oh-my-zsh:
sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

install zsh autosuggestions and zsh-syntax-highlighting:
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting

cd ~/Downloads && git clone https://github.com/archornf/dotfiles
Copy files from config!

For ST:
And uncomment the line f->badweight = 1; in x.c

If sudo apt install ueberzug fails:
pip3 install setuptools
git clone https://github.com/WhiteBlackGoose/ueberzug-latest && cd ueberzug-latest
sudo pip install -e .

For dwm, fix battery, volume and cputemp scripts (remove unnecessary
whitespace, add /usr/bin/bash instead of /bin/sh, and use sb-volume_deb. Also
need to add correct click/scroll for dwmblocks to sb-battery... Also update
keybinds for volume in dwm conf.

For tesseract ocr:
(need to install eng trained data for tesseract-ocr also. Look for
towardsdatascience python read text from image)... Also set tesseract
variable...
Download:
https://github.com/tesseract-ocr/tessdata/blob/main/eng.traineddata
And place in /home/jonas/.local/share/tessdata

Might need to change TESSDATA_PREFIX in tesseract_ocr to /home/jonas/.local/share/tessdata
And change scripts to /usr/bin/bash and /usr/bin/python3...

******************************************
TODO:

vmangos, cmangos-bots... Copy data from home pc to HDD...
dbs...

Fix battery script to show for different batteries and network if no
battery found?

----------------------------------------------------------------------------------
cd ~/Documents

git clone https://$GITHUB_TOKEN@github.com/archornf/my_notes

----------------------------------------------------------------------------------
cd ~/Code/c

sudo apt remove neovim, then:
git clone https://github.com/neovim/neovim
cd neovim && git checkout stable
make CMAKE_BUILD_TYPE=RelWithDebInfo
sudo make install

----------------------------------------------------------------------------------
cd ~/Code/c++

******************************************
Openmw:

git clone https://gitlab.com/OpenMW/openmw
cd openmw
If you have mygui 3.4.2, then: git checkout 1c2f92cac9
If you have mygui 3.4.1, then git checkout abb71eeb
See mygui version with:
dpkg -l | grep mygui
Or:
apt list --installed | grep mygui
Or:
ldconfig -p | grep mygui

mkdir build && cd build 
cmake .. -DCMAKE_BUILD_TYPE=Release
make -j$(nproc)
sudo make install
Note** If you are having undefined reference errors while compiling, 
its possible that you have previously installed a different openscenegraph 
version than what openMW depends on.
To remove it, you can use:
#removes just package
apt-get remove <yourOSGversion>
#or 
#removes configurations as well
apt-get remove --purge <yourOSGversion>

******************************************
OpenJK:

git clone --recurse-submodules https://github.com/JACoders/OpenJK 

Change the BuildJK2SPEngine, BuildJK2SPGame, and BuildJK2SPRdVanilla
options to ON in CMakeLists.txt.

cd OpenJK
cmake -DCMAKE_INSTALL_PREFIX=/home/jonas/Downloads/ja_data -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
make -j$(nproc)
sudo make install

******************************************
JediKnightGalaxies & jk2mv:

git clone --recurse-submodules https://github.com/JKGDevs/JediKnightGalaxies
cd JediKnightGalaxies && mkdir build && cd build
cmake -DCMAKE_INSTALL_PREFIX=/home/jonas/Downloads/ja_data -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
make -j$(nproc)
sudo make install

git clone --recurse-submodules https://github.com/mvdevs/jk2mv
cd jk2mv && mkdir build_new && cd build_new
cmake .. CMAKE_BUILD_TYPE=Debug
make -j$(nproc)
sudo make install
make package Generates rpm/deb packages on Linux and a dmg image on MacOSX.
The above works, but you could also try the build files in jk2mv/build

******************************************
unvanquished:

git clone --recurse-submodules https://github.com/Unvanquished/Unvanquished.git
cd Unvanquished/
./download-paks build/pkg
mkdir build && cd build
cmake .. -DCMAKE_BUILD_TYPE=Release
make -j$(nproc)

On rbpi I got some IPC socket errors. However, you should still be able to run the game like this:
./daemon -set r_fullscreen 0 -set r_noBorder 1 -set r_mode -1 -set r_customWidth 1280 -set r_customHeight 720 -set vm.cgame.type 3 -set vm.sgame.type 3

See:
https://github.com/Unvanquished/Unvanquished/issues/2739
https://github.com/Unvanquished/Unvanquished/issues/1015

******************************************
GTA / re3:

git clone --recurse-submodules https://github.com/halpz/re3.git
cd re3
If you're on x86/x86_64, run $ ./premake5Linux --with-librw gmake2

If you're on i.e. arm/arm64, you need to build your own premake5 from source.
Then you can proceed to running premake5 with --with-librw gmake2 arguments.

Do this:
cd ~/Downloads
For fetching pre-compiled binary (doesn't work for ARM64 :()
#wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha16/premake-5.0.0-alpha16-linux.tar.gz
See https://github.com/premake/premake-core/releases for updated version.
Then,
#tar -zxvf premake-5.0.0-alpha16-linux.tar.gz
sudo mv premake5 /usr/local/bin
premake5 --version

Do this instead:
cd ~/Downloads
git clone --recurse-submodules https://github.com/premake/premake-core
cd premake-core
make -f Bootstrap.mak linux
cd bin/release
Verify that it's built for ARM64:
file premake5
sudo mv premake5 /usr/local/bin
premake5 --version

Now we can do:
premake5 --with-librw gmake
Instead of: ./premake5Linux --with-librw gmake2

Enter the build directory and run make help to see a help message with supported 
build configurations and architectures. As of now, refer to one of the 
available configurations:

make config=debug_linux-arm64-librw_gl3_glfw-oal
Or:
make config=release_linux-arm64-librw_gl3_glfw-oal

For Vice City / miami branch:
git clone --recurse-submodules -b miami https://github.com/halpz/re3 re3_vice

Arm64 (rpbi):
premake5 --with-librw gmake
Else:
./premake5Linux --with-librw gmake2

Enter the build directory and run make help to see a help message with supported 
build configurations and architectures. As of now, refer to one of the 
available configurations:

make config=debug_linux-arm64-librw_gl3_glfw-oal
Or:
make config=release_linux-arm64-librw_gl3_glfw-oal

******************************************
reone:

git clone --recurse-submodules https://github.com/seedhartha/reone
cd reone && cmake -B build -S . -DCMAKE_BUILD_TYPE=RelWithDebInfo
make -j$(nproc)
sudo make install

Reone doesn't work well with ARM. Pi's GPU usually supports up to OpenGL ES
3.2, reone requires OpenGL 3.3 Core.
https://github.com/seedhartha/reone/issues/54
Otherwise:
reone --game GAME_DIR

----------------------------------------------------------------------------------
cd ~/Code/js

kotor-js:

npm install
# Run the build command
npm run webpack:dev-watch
# Run the start command in a separate console/shell window
npm run start

----------------------------------------------------------------------------------
cd ~/Code/rust

eww and swww requires other rust version (> 1.7?):

curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source "$HOME/.cargo/env"
rustc --version

Eww:
git clone https://github.com/elkowar/eww
cd eww
cargo build --release --no-default-features --features x11
cd target/release
chmod +x ./eww
./eww daemon
./eww open <window_name>

swww:
git clone https://github.com/LGFae/swww
cd swww
cargo build --release

----------------------------------------------------------------------------------
cd ~/Code2/C

git clone https://github.com/ornfelt/ioq3
cd ioq3 && make

https://github.com/ornfelt/q3lite doesn't work on rbpi 4b+
You can get it to compile by adding this in make-raspberrypi.sh:
else
    echo -e "\e[01;31mUnable to determine platform type from /proc/cpuinfo\n\e[0m"
    ptype="arm"
    #exit 6
fi

******************************************
picom:

git clone recurse-submodules https://github.com/ornfelt/picom-animations
cd picom-animations
meson --buildtype=release . build
ninja -C build

----------------------------------------------------------------------------------
cd ~/Code2/C++

supertuxkart:

git clone https://github.com/ornfelt/stk-code
svn co https://svn.code.sf.net/p/supertuxkart/code/stk-assets stk-assets

cd stk-code
# create and enter the cmake_build directory
mkdir build && cd build
cmake ..
Or:
cmake .. -DCMAKE_BUILD_TYPE=Debug
* Install shaderc from your distribution or disable vulkan support:
cmake .. -DCMAKE_BUILD_TYPE=Release -DNO_SHADERC=on
make -j$(nproc)

To recompile the latest code without redownloading the entire source, 
first run the svn up command inside the 'stk-assets' directory, then 
run the following commands inside the 'stk-code' directory:
git pull
cd build
cmake ..
make -j$(nproc)

******************************************
small-games: Craft, CPP-FightingGame (also compile v2), pacman, space-shooter.

git clone --recurse-submodules -b linux https://github.com/ornfelt/small_games
cd small_games
cd BirdGame
g++ -std=c++17 -g *.cpp -o main -lSDL2main -lSDL2 -lSDL2_image -lSDL2_ttf -lSDL2_mixer
cp -r BirdGame/graphics ./
cd ../CPP_FightingGame/FightingGameProject
cmake . && make -j$(nproc)

cd ../../Craft
cmake . && make -j$(nproc)
gcc -std=c99 -O3 -fPIC -shared -o world -I src -I deps/noise deps/noise/noise.c src/world.c

cd ../pacman/
mkdir build && cd build
cmake ..
cmake --build .

https://emscripten.org/docs/getting_started/downloads.html#installation-instructions
# git clone https://github.com/emscripten-core/emsdk.git
# cd emsdk
# ./emsdk install latest
# ./emsdk activate latest
# source ./emsdk_env.sh
# mkdir build_wasm && cd build_wasm
# emcmake cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=MinSizeRel ..
# cmake --build .

cd ../../space-shooter
make linux / make linux-release
#make web / make web-release

******************************************
AzerothCore:
git clone https://github.com/ornfelt/azerothcore-wotlk
cd azerothcore-wotlk
mkdir build && cd build
cmake ../ -DCMAKE_INSTALL_PREFIX=$HOME/acore/ -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DWITH_WARNINGS=1 -DTOOLS_BUILD=all -DSCRIPTS=static -DMODULES=static -DWITH_COREDEBUG=1 -DCMAKE_BUILD_TYPE=RelWithDebInfo
make -j$(nproc)
make install

TrinityCore:
git clone -b 3.3.5 https://github.com/ornfelt/trinitycore --single-branch --depth 1
cd trinitycore
mkdir build && cd build
cmake ../ -DCMAKE_INSTALL_PREFIX=$HOME/tcore/ -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DWITH_WARNINGS=1 -DTOOLS_BUILD=all -DSCRIPTS=static -DMODULES=static -DWITH_COREDEBUG=1 -DCMAKE_BUILD_TYPE=RelWithDebInfo
make -j$(nproc)
make install

For DB configuration...
sudo mysql
-- for MySQL
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'passwd';
-- for MariaDB
ALTER USER 'root'@'localhost' IDENTIFIED VIA mysql_native_password USING PASSWORD('passwd');
Then login via:
mysql -u root -p

******************************************
simc:

git clone --recurse-submodules https://github.com/ornfelt/simc --single-branch --depth 1
cd simc/
mkdir build && cd build
cmake ../ -DCMAKE_BUILD_TYPE=Release
make -j$(nproc)
sudo make install

Or:
Command Line Interface (classic build):
cd your_simc_source_dir/engine
make optimized
This builds an optimized executable named simc
Additional options:
Build with clang: Add CXX=clang++, eg. make optimized CXX=clang++
Note that if you issue the build with SC_NO_NETWORKING=1, libcurl-dev
package is not necessary

******************************************
OpenJKDF2:

* Make sure cog package is NOT installed (only pip3 install cogapp)
sudo apt remove cog
Make sure that cog is in ~/.local/bin
git clone --recurse-submodules https://github.com/ornfelt/OpenJKDF2 -b linux
cd OpenJKDF2
Add the following to ~/.bashrc (if not added already)
export PATH=$PATH:~/.local/bin
then: source ~/.bashrc

export CC=clang
export CXX=clang++
./build_linux64.sh
LD_LIBRARY_PATH=build_linux64 ./build_linux64/openjkdf2
or just: ./build_linux64/openjkdf2

******************************************
Diablo:

git clone https://github.com/ornfelt/devilutionX
cd devilutionX
The smpq package on debian has had issues so it might not work.
But can you always try to install it and build:
sudo apt-get install smpq
Otherwise, you can do:
sudo apt remove smpq
cd tools && ./build_and_install_smpq.sh
then:
sudo cp /usr/local/bin/smpq /usr/bin/smpq

Then build with:
arm64 (aarch64):
Packaging/nix/debian-cross-aarch64-prep.sh
cmake -S. -Bbuild-aarch64-rel \
  -DCMAKE_TOOLCHAIN_FILE=../CMake/platforms/aarch64-linux-gnu.toolchain.cmake \
  -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCPACK=ON \
  -DDEVILUTIONX_SYSTEM_LIBFMT=OFF
cmake --build build-aarch64-rel -j $(getconf _NPROCESSORS_ONLN) --target package

Other:
cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release
cmake --build build -j $(getconf _NPROCESSORS_ONLN)

******************************************
Crispy-doom

git clone --recurse-submodules https://github.com/ornfelt/crispy-doom

cd crispy-doom
autoreconf -fiv
./configure
make -j$(nproc)

After successful compilation the resulting binaries can be found in the src/
director

Same with chocolate-doom:
git clone --recurse-submodules https://github.com/chocolate-doom/chocolate-doom
cd chocolate-doom
autoreconf -fiv
./configure
make -j$(nproc)
Run with:
./crispy-doom -iwad ~/Downloads/doom/DOOM.WAD
For chocolate-doom:
./chocolate-doom -iwad ~/Downloads/doom/DOOM.WAD

Doom 3:
git clone --recurse-submodules https://github.com/ornfelt/dhewm3.git
cd dhewm3
mkdir build && cd build
cmake ../neo/
make -j$(nproc)
When all steps are done and no errors occurred, you should be able to run
dhewm3 right there, like:
./dhewm3 +set fs_basepath /path/to/your/doom3/
Replace /path/to/your/doom3/ with the path to your Doom3 installation (that
contains base/ with pak000.pk4 to pak008.pk4

----------------------------------------------------------------------------------
cd ~/Code2/General

git clone --recurse-submodules https://github.com/ornfelt/Svea-Examples
git clone --recurse-submodules https://github.com/ornfelt/Svea-1brc
git clone https://$GITHUB_TOKEN@github.com/ornfelt/utils

----------------------------------------------------------------------------------
cd ~/Code2/Go

git clone --recurse-submodules https://github.com/ornfelt/wotlk-sim

----------------------------------------------------------------------------------
cd ~/Code2/Python

git clone https://github.com/ornfelt/wander_nodes_util

----------------------------------------------------------------------------------
cd ~/Code2/Wow/tools

******************************************
mpq gophercraft:

cd gophercraft_mpq_set
go build github.com/Gophercraft/mpq/cmd/gophercraft_mpq_set

******************************************
BLPConverter
sudo apt-get install cmake git gcc
git clone git://github.com/ornfelt/BLPConverter.git
cd BLPConverter
mkdir build && cd build
cmake .. -DWITH_LIBRARY=YES
sudo make install
sudo cp /usr/local/lib/libblp.so /usr/lib/
sudo ldconfig

******************************************
Stormlib:
sudo apt-get install cmake git gcc zlib1g-dev
git clone git://github.com/ladislav-zezula/StormLib.git
cd StormLib
mkdir build && cd build
cmake .. -DBUILD_SHARED_LIBS=ON
sudo make install
sudo cp /usr/local/lib/libstorm.so /usr/lib/
sudo ldconfig

******************************************
Wowser and spelunker:

git clone --recurse-submodules https://github.com/wowserhq/spelunker
cd spelunker/packages/spelunker-api && npm install && cd -
cd spelunker/packages/spelunker-web && npm install && cd -

git clone --recurse-submodules https://github.com/ornfelt/wowser
cd wowser
git checkout minimal
npm install

Accessing spelunker hosted on raspberry pi:
npm uninstall crypto-hash
npm install js-sha256

In /home/jonas/Code2/Wow/tools/spelunker/packages/spelunker-web/src/components/Spelunker/graphql-client.js
Remove crypto sha256 and use this:
import { sha256 } from 'js-sha256';

.envrc:
export API_PORT=3001
export API_URI=http://192.168.1.172:3001/graphql
export CORS_ALLOWED_ORIGINS=*
export DATA_DIR='/home/jonas/Downloads/wow/Data'
export DATABASE_AUTH_URI=mysql://trinity:trinity@127.0.0.1/auth
export DATABASE_CHARACTERS_URI=mysql://trinity:trinity@127.0.0.1/characters
export DATABASE_WORLD_URI=mysql://trinity:trinity@127.0.0.1/world
export DEBUG=spelunker:*
export PIPELINE_URI=http://192.168.1.172:3001/pipeline
export WEB_PORT=3000

export DATA_URI=http://192.168.1.172:3002/files
export MINIMAP_URI=http://192.168.1.172:3002/files

******************************************
wowmapview:

wowmapview:
git clone --recurse-submodules https://github.com/ornfelt/wowmapviewer -b linux
cd src/stormlib && make -f Makefile.linux
cd .. && make

To run:
./wowmapview -gamepath ~/Downloads/cata/Data/

WebWowViewerCpp:

git clone --recurse-submodules https://github.com/Deamon87/WebWowViewerCpp -b linux
cd WebWowViewerCpp
mkdir build && cd build
cmake .. && make -j$(nproc)

----------------------------------------------------------------------------------
Other stuff:

Greenclip:

wget https://github.com/erebe/greenclip/releases/download/v4.2/greenclip -O ~/.local/bin/greenclip

******************************************
Dotnet:
See: https://learn.microsoft.com/en-us/dotnet/core/install/linux-debian
Do this for Debian 12:
wget https://packages.microsoft.com/config/debian/12/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
sudo dpkg -i packages-microsoft-prod.deb
rm packages-microsoft-prod.deb

sudo apt-get update && sudo apt-get install -y dotnet-sdk-8.0
sudo apt-get update && sudo apt-get install -y aspnetcore-runtime-8.0

If the above doesn't work, follow scripted install instead:
https://learn.microsoft.com/en-us/dotnet/core/install/linux-scripted-manual#scripted-install

wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
chmod +x ./dotnet-install.sh
./dotnet-install.sh --version latest
./dotnet-install.sh --version latest --runtime aspnetcore

******************************************
Docker:
https://docs.docker.com/engine/install/debian/

******************************************
For spotify (debian 12):
sudo mkdir -p /etc/apt/keyrings
curl -sSf https://download.spotify.com/debian/pubkey_7A3A762FAFD4A51F.gpg | gpg --dearmor | sudo tee /etc/apt/keyrings/spotify.gpg > /dev/null
echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/spotify.gpg] http://repository.spotify.com stable non-free" | sudo tee /etc/apt/sources.list.d/spotify.list
sudo apt update
sudo apt install spotify-client

# The spotify package is currently broken and installs files owned by uid 1000, fix it
dpkg -L spotify-client | sudo xargs chown --no-dereference root:root

******************************************
Picom:
https://github.com/pijulius/picom
sudo apt remove picom, then:
#git submodule update --init --recursive
meson --buildtype=release . build
ninja -C build
sudo ninja -C build install
Start picom with picom --animations

******************************************
Eclipse:
https://wiki.debian.org/Eclipse

Android studio:
https://wiki.debian.org/AndroidStudio

Steam:
https://wiki.debian.org/Steam#Installing_Steam

For virtualbox:
sudo apt install -y virtualbox-guest-utils virtualbox-guest-X11
Virtualbox guest utils doesn't work it seems... See:
https://techviewleo.com/install-virtualbox-guest-additions-on-debian/

Maybe try this:
git clone --recursive https://github.com/ornfelt/Debian-Hyprland/
cd Debian-Hyprland && ./install.sh

******************************************
OBS! you probably need in .bash_profile / .bashrc to run most games:
export MESA_GL_VERSION_OVERRIDE=3.3

ALSO:
'getconf PAGESIZE' returns 16k for raspberry pi which is a problem for jemalloc
and some other things (required for AzerothCore / TrinityCore):
https://github.com/raspberrypi/bookworm-feedback/issues/107

If you find this is a problem, switch to the 4k page size using:
kernel=kernel8.img
sudo nvim /boot/config.txt

You can add it after arm_boost=1 for example. (before [cm4] and [all].

Also make sure that realmlist address and port is set correctly. I've changed
port when testing wowser / acore-client for example.

----------------------------------------------------------------------------------
* Don't forget to copy data for:
acore, tcore, vmangos, cmangos-bots,
q3, doom, doom3,
jajo, jkdf2, kotor1/2,
gta, openmw, diablo, stk_addons

q3: copy all pk3 files into baseq3 dir (in buld dir).

ja: ~/local/share/openjk or maybe /usr/local/JediAcademy or wherever you used DCMAKE_INSTALL_PREFIX?
jo:~/local/share/openjo or maybe /usr/local/JediOutcast wherever you used DCMAKE_INSTALL_PREFIX?
Run from either:
/usr/local/JediAcademy
/usr/local/JediOutcast

For jkdf2:
~/.local/share/OpenJKDF2/openjkdf2

Kotor:
use launcher(s) to select location.

For GTA, just copy re3 executable into GTA dirs / copy all GTA files into build
dir.

For OpenMW, keep the files in Download and run openmw-launcher and select the
Morrowind.esm in Data Files dir. Then start with ./openmw

For diablo: 
Copy DIABDAT.MPQ from the CD or GOG-installation to the build dir.
To run the Diablo: Hellfire expansion you will need to also copy hellfire.mpq,
hfmonk.mpq, hfmusic.mpq, hfvoice.mpq.

For Doom you can keep the files in Downloads and run the executable with:
./crispy-doom -iwad ~/Downloads/doom/DOOM.WAD
For chocolate-doom:
./chocolate-doom -iwad ~/Downloads/doom/DOOM.WAD
For doom3, copy into build dir.

stk addons:
On Windows: %APPDATA%\supertuxkart\addons

On Linux: ~/.local/share/supertuxkart/addons
/usr/share/games/supertuxkart/data/tracks (for older STK versions)

On Mac OS X: ~/Library/Application Support/SuperTuxKart/Addons

Installing and Removing:
Within this folder, the following files and subdirectories exist: icons, karts,
tmp, tracks, addons.xml, addons_installed.xml, news.xml

To install an Add-on, simply copy the whole folder with the Add-On to the
correspondig subdirectory. Note that Arenas go in the track folder because they
are technically tracks.

Uninstalling is done by removing that folder.
Additionally, /installaddon and /uninstalladdon can be used in networking lobby
to install or uninstall Add-ons.

******************************************
Missing packages - install manually:

gruvbox-dark-gtk
ttf-icomoon-feather
ttf-iosevka-nerd
ttf-joypixels

******************************************
sudo systemctl enable bluetooth.service
sudo systemctl enable NetworkManager.service
More services nginx, firewall etc...

----------------------------------------------------------------------------------
#sudo apt-get update -y && sudo apt-get upgrade -y
#sudo apt-get install -y

ace 
advancecomp 
alsa-utils
autoconf 
automake 
autopkgtest 
autotools-dev
awesome 
base 
bat 
binutils 
bison 
bluez
build-essential 
cabal-install
chafa 
checkinstall 
chromium 
clang 
cmake 
cog 
conky 
cron 
curl
debhelper 
default-libmysqlclient-dev 
devscripts 
dhcpcd 
dmenu 
dosfstools 
doxygen
dpkg-dev 
dunst
dwm 
efibootmgr 
emscripten 
fakeroot 
feh 
ffmpegthumbnailer 
firefox-esr 
fish 
flex 
fonts-font-awesome
fonts-jetbrains-mono
fonts-wine 
foot
freeglut3-dev
fzf 
g++ 
gcc 
gdb 
gettext 
ghc 
git
git-buildpackage 
git-core 
git-lfs 
git-man 
gnuplot 
gpg
gradle 
grep 
grim
gtk2-engines-murrine 
htop 
i3 
i3-wm 
i3blocks 
i3lock 
i3status 
imagemagick 
jq 
jupyter-notebook 
kitty 
lf 
libace-dev 
libasound2-dev 
libavcodec-dev 
libavformat-dev 
libavutil-dev 
libbluetooth-dev 
libboost-all-dev 
libboost-filesystem-dev 
libboost-iostreams-dev 
libboost-program-options-dev 
libbullet-dev 
libbz2-dev 
libc-ares-dev 
libcglm-dev 
libcollada-dom-dev
libconfig-dev 
libcpprest-dev 
libcsfml-dev 
libcurl4-gnutls-dev 
libcurl4-openssl-dev 
libdbus-1-dev 
libenet-dev 
libev-dev 
libevdev-dev 
libfmt-dev
libfreetype6 
libfreetype6-dev 
libfuse-dev
libfuse2 
libgeoip-dev
libgl-dev 
libgl1-mesa-dev 
libgl1-mesa-dri 
libglew-dev 
libglfw3 
libglfw3-dev 
libglm-dev
libgmock-dev 
libgmp-dev 
libgtest-dev 
libgtk-3-dev 
libharfbuzz-dev 
libhogweed6 
libjemalloc-dev 
libjemalloc2 
libjpeg-dev 
liblua5.2-dev 
liblua5.3-dev 
libluajit-5.1-dev 
liblz4-dev 
libmad0-dev
libmbedtls-dev 
libminizip-dev
libmpg123-dev
libmsgpack-dev 
libmygui-dev 
libmygui.ogreplatform0debian1v5
libmygui.openglplatform0debian1v5 
libmyguiengine3debian1v5 
libmysql++-dev 
libncurses-dev 
libncurses5-dev 
libncursesw5-dev 
libnettle8 
libogg-dev 
libopenal-dev 
libopenscenegraph-dev 
libopus-dev 
libopusfile-dev 
libpcre2-dev 
libpcre3-dev 
libpixman-1-dev 
libpng-dev 
libprotobuf-dev
libpulse-dev 
libqt5opengl5-dev 
libreadline-dev 
librecast-dev 
librust-starship-module-config-derive-dev
libsdl1.2-compat
libsdl1.2-compat-dev
libsdl2-2.0.0 
libsdl2-dev
libsdl2-gfx-1.0-0 
libsdl2-gfx-dev 
libsdl2-image-2.0-0 
libsdl2-image-dev 
libsdl2-mixer-2.0-0 
libsdl2-mixer-dev 
libsdl2-net-2.0-0 
libsdl2-net-dev
libsdl2-ttf-dev 
libsfml-dev 
libsndfile1-dev 
libsndio-dev
libsodium-dev 
libsqlite3-dev 
libssl-dev 
libswresample-dev 
libswscale-dev 
libtbb-dev 
libtermkey-dev
libtheora-dev 
libtinyxml-dev 
libtool 
libtool-bin 
libunibilium-dev 
libunshield-dev 
libvorbis-dev 
libwebp-dev 
libwine 
libwxgtk3.2-dev
libx11-dev 
libx11-xcb-dev
libxcb-composite0-dev 
libxcb-damage0-dev 
libxcb-glx0-dev 
libxcb-image0-dev 
libxcb-present-dev 
libxcb-randr0-dev 
libxcb-render-util0-dev 
libxcb-render0-dev 
libxcb-res0-dev 
libxcb-shape0-dev 
libxcb-xfixes0-dev 
libxcb-xinerama0-dev 
libxcb1-dev 
libxdo-dev
libxext-dev 
libxft-dev 
libxinerama-dev
libxres-dev 
libxxf86vm-dev 
libyaml-cpp-dev 
light 
linux-libc-dev 
lm-sensors 
locales
lua-lpeg 
lua-mpack 
lua5.4 
luajit 
luarocks
lxappearance 
m4 
maim 
make 
mariadb-client 
mariadb-server 
mesa-common-dev
mesa-utils 
mesa-va-drivers 
meson 
mono-complete 
mpv 
mtools 
nasm 
neofetch 
neovim
net-tools 
netctl 
nettle-dev 
network-manager
nginx 
ninja-build 
node-gyp 
node-semver 
nodejs 
npm
ntfs-3g 
obs-studio 
openscenegraph 
openssl 
optipng 
p7zip
pamix 
pamixer 
patch 
php 
php-mysql 
picom 
pkg-config 
pkgconf 
pngquant 
polybar 
powertop 
premake4 
protobuf-compiler 
pulseaudio 
python3 
python3-jinja2
python3-mako
python3-pip
python3-pyaudio 
python3-yaml 
qrencode 
ranger 
rofi 
rustfmt 
rxvt-unicode
scdoc
scons 
screen 
scrot
silversearcher-ag 
slurp 
software-properties-common 
speedtest-cli 
subversion 
suckless-tools 
swaybg 
swayidle 
swaylock
sxiv 
tesseract-ocr
thunar 
tk 
tlp 
tmux
ueberzug 
ufw 
unshield 
unzip 
uthash-dev 
visidata 
vorbis-tools 
wget 
wine 
wine64 
xawtv 
xclip 
xdg-utils 
xdotool 
xfce4-power-manager 
xinit 
xinput 
xorg 
xorg-dev 
xsel 
xserver-xorg-input-all
xserver-xorg-input-libinput
xserver-xorg-input-synaptics 
xserver-xorg-video-all
xserver-xorg-video-vesa 
yad 
yad 
yarn
yasm 
yq 
zathura 
zathura-pdf-poppler 
zip 
zlib1g 
zlib1g-dev
zsh 

