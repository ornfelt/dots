diff --git a/config.h b/config.h
index ec7de9e..3fb3f44 100644
--- a/config.h
+++ b/config.h
@@ -214,7 +214,7 @@ static const Key keys[] = {
         /* { MODKEY,                   XK_Tab,             view,               {0} }, */
         /* { MODKEY,                   XK_Tab,             view,               {0} }, */
         { MODKEY,                   XK_q,               killclient,         {0} },
-        { MODKEY|ShiftMask,         XK_p,               togglebar,          {0} },
+        { MODKEY|ShiftMask,         XK_p,               togglebars,          {0} },
         { MODKEY|ControlMask|ShiftMask,     XK_p,       togglebar,          {0} },
         { MODKEY,                   XK_h,               focusmon,           { .i = -1 } },
         { MODKEY|ShiftMask,         XK_h,               tagmonview,         { .i = -1 } },
diff --git a/dwm.c b/dwm.c
index 6232799..8b14f30 100644
--- a/dwm.c
+++ b/dwm.c
@@ -200,6 +200,7 @@ static void destroynotify(XEvent *e);
 static void detach(Client *c);
 static void detachstack(Client *c);
 static Monitor *dirtomon(int dir);
+static Monitor *numtomon(int num);
 static void drawbar(Monitor *m);
 static void drawbars(void);
 static int drawstatusbar(Monitor *m, int bh, char* text);
@@ -207,6 +208,7 @@ static void expose(XEvent *e);
 static void focus(Client *c);
 static void focusin(XEvent *e);
 static void focusmon(const Arg *arg);
+static void focusnthmon(const Arg *arg);
 static void focusstack(const Arg *arg);
 static Atom getatomprop(Client *c, Atom prop);
 static int getrootptr(int *x, int *y);
@@ -258,7 +260,12 @@ static void tag(const Arg *arg);
 static void tagview(const Arg *arg);
 static void tagmon(const Arg *arg);
 static void tagmonview(const Arg *arg);
+static void tagnextmon(const Arg *arg);
+static void tagnewmon(const Arg *arg);
+static void tagnthmon(const Arg *arg);
+static void tagnthmonview(const Arg *arg);
 static void togglebar(const Arg *arg);
+static void togglebars(const Arg *arg);
 static void togglefloating(const Arg *arg);
 static void togglescratch(const Arg *arg);
 static void togglesticky(const Arg *arg);
@@ -791,7 +798,10 @@ createmon(void)
 	Monitor *m;
 
 	m = ecalloc(1, sizeof(Monitor));
-	m->tagset[0] = m->tagset[1] = 1;
+    if (mons)
+        m->tagset[0] = m->tagset[1] = 2;
+    else
+        m->tagset[0] = m->tagset[1] = 1;
 	m->mfact = mfact;
 	m->nmaster = nmaster;
 	m->showbar = showbar;
@@ -857,6 +867,17 @@ dirtomon(int dir)
 	return m;
 }
 
+Monitor *
+numtomon(int num)
+{
+    Monitor *m = NULL;
+    int i = 0;
+
+    for(m = mons, i=0; m->next && i < num; m = m->next)
+        i++;
+    return m;
+}
+
 int
 drawstatusbar(Monitor *m, int bh, char* stext)
 {
@@ -1091,6 +1112,22 @@ focusmon(const Arg *arg)
 	focus(NULL);
 }
 
+void
+focusnthmon(const Arg *arg)
+{
+    Monitor *m;
+
+    if (!mons->next)
+        return;
+
+    if ((m = numtomon(arg->i)) == selmon)
+        return;
+    unfocus(selmon->sel, 0);
+    XWarpPointer(dpy, None, m->barwin, 0, 0, 0, 0, m->mw / 2, m->mh / 2);
+    selmon = m;
+    focus(NULL);
+}
+
 void
 focusstack(const Arg *arg)
 {
@@ -2175,20 +2212,76 @@ stackpos(const Arg *arg) {
 		return arg->i;
 }
 
+//void
+//tag(const Arg *arg)
+//{
+//    if (selmon->sel && arg->ui & TAGMASK) {
+//        if (mons && mons->next) {
+//            // Moving to even tag, selected mon != first mon
+//            if ((arg->ui & 341) == 0 && selmon != mons) {
+//                selmon->sel->tags = arg->ui & TAGMASK;
+//                focus(NULL);
+//                arrange(selmon);
+//                // Moving to odd tag, selected mon == first mon
+//            } else if ((arg->ui & 341) > 0 && selmon == mons) {
+//                selmon->sel->tags = arg->ui & TAGMASK;
+//                focus(NULL);
+//                arrange(selmon);
+//            } else {
+//                tagnextmon(arg);
+//            }
+//        } else {
+//            if (selmon->sel && arg->ui & TAGMASK) {
+//                selmon->sel->tags = arg->ui & TAGMASK;
+//                focus(NULL);
+//                arrange(selmon);
+//            }
+//        }
+//    }
+//}
+
 void
 tag(const Arg *arg)
 {
-	if (selmon->sel && arg->ui & TAGMASK) {
-		selmon->sel->tags = arg->ui & TAGMASK;
-		focus(NULL);
-		arrange(selmon);
-	}
+    if (!(selmon->sel && arg->ui & TAGMASK))
+        return;
+
+    if (mons && mons->next) {
+        // Moving to even tag, selected mon != first mon
+        if ((arg->ui & 341) == 0 && selmon != mons) {
+            selmon->sel->tags = arg->ui & TAGMASK;
+        }
+        // Moving to odd tag, selected mon == first mon
+        else if ((arg->ui & 341) > 0 && selmon == mons) {
+            selmon->sel->tags = arg->ui & TAGMASK;
+        } else {
+            tagnextmon(arg);
+            return;
+        }
+    } else {
+        selmon->sel->tags = arg->ui & TAGMASK;
+    }
+
+    focus(NULL);
+    arrange(selmon);
 }
 
 void
 tagview(const Arg *arg)
 {
     if (selmon->sel && arg->ui & TAGMASK) {
+        if (mons && mons->next) {
+            // If first monitor and moving to even tag (second mon)
+            if ((arg->ui & 341) == 0 && selmon == mons) {
+                tagnthmonview(&((Arg) { .i = 1 }));
+                tagnewmon(arg);
+                return;
+            } else if ((arg->ui & 341) > 0 && selmon != mons) {
+                tagnthmonview(&((Arg) { .i = 0 }));
+                tagnewmon(arg);
+                return;
+            }
+        }
         selmon->sel->tags = arg->ui & TAGMASK;
         focus(NULL);
         arrange(selmon);
@@ -2212,6 +2305,51 @@ tagmonview(const Arg *arg)
     sendmonview(selmon->sel, dirtomon(arg->i));
 }
 
+void
+tagnextmon(const Arg *arg)
+{
+    Client *sel;
+    Monitor *newmon;
+
+    if (!selmon->sel || !mons->next)
+        return;
+    sel = selmon->sel;
+    newmon = dirtomon(1);
+    sendmon(sel, newmon);
+    if (sel && arg->ui & TAGMASK) {
+        sel->tags = arg->ui & TAGMASK;
+        focus(NULL);
+        arrange(newmon);
+    }
+}
+
+void
+tagnewmon(const Arg *arg)
+{
+    if (selmon->sel && arg->ui & TAGMASK) {
+        selmon->sel->tags = arg->ui & TAGMASK;
+        focus(NULL);
+        arrange(selmon);
+        view(arg);
+    }
+}
+
+void
+tagnthmon(const Arg *arg)
+{
+    if (!selmon->sel || !mons->next)
+        return;
+    sendmon(selmon->sel, numtomon(arg->i));
+}
+
+void
+tagnthmonview(const Arg *arg)
+{
+    if (!selmon->sel || !mons->next)
+        return;
+    sendmonview(selmon->sel, numtomon(arg->i));
+}
+
 void
 togglebar(const Arg *arg)
 {
@@ -2221,6 +2359,18 @@ togglebar(const Arg *arg)
 	arrange(selmon);
 }
 
+void
+togglebars(const Arg *arg)
+{
+    Monitor *m;
+    for (m = mons; m; m = m->next) {
+        m->showbar = !m->showbar;
+        updatebarpos(m);
+        XMoveResizeWindow(dpy, m->barwin, m->wx, m->by, m->ww, bh);
+        arrange(m);
+    }
+}
+
 void
 togglefloating(const Arg *arg)
 {
@@ -2623,16 +2773,27 @@ updatewmhints(Client *c)
 void
 view(const Arg *arg)
 {
-    if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags]) {
-        view(&((Arg) { .ui = 0 }));
-        return;
+    if (mons && mons->next) {
+        if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])
+            return;
+
+        // GENIUS 101010101
+        if ((arg->ui & 341) == 0)
+            focusnthmon(&((Arg) { .i = 1 }));
+        else
+            focusnthmon(&((Arg) { .i = 0 }));
+    } else {
+        if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags]) { 
+            view(&((Arg) { .ui = 0 })); 
+            return; 
+        } 
     }
 
-	selmon->seltags ^= 1; /* toggle sel tagset */
-	if (arg->ui & TAGMASK)
-		selmon->tagset[selmon->seltags] = arg->ui & TAGMASK;
-	focus(NULL);
-	arrange(selmon);
+    selmon->seltags ^= 1; /* toggle sel tagset */
+    if (arg->ui & TAGMASK)
+        selmon->tagset[selmon->seltags] = arg->ui & TAGMASK;
+    focus(NULL);
+    arrange(selmon);
 }
 
 pid_t
