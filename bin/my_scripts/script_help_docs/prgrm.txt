The time complexity is the computational complexity of an algorithm.

Since an algorithm's running time may vary among different inputs of the same size, one commonly considers the worst-case time complexity, which is the maximum amount of time required for inputs of a given size. Less common, and usually specified explicitly, is the average-case complexity.

Constant time: O(1) Example: Finding the median value in a sorted array of numbers.
log-logarithmic: O(log log n) 
logarithmic time: O(log n) Binary search
linear time: O(n) Finding the smallest or largest item in an unsorted array, Kadane's algorithm, linear search.
linearithmic time: O(n log n) Fastest possible comparison sort; Fast Fourier transform. 
quadratic time: O(n^2) Bubble sort; Insertion sort; Direct convolution.




Terms:
xxxx.............


Sources:
https://en.wikipedia.org/wiki/Time_complexity#Polynomial_time
https://www.bigocheatsheet.com/
https://towardsdatascience.com/top-algorithms-and-data-structures-you-really-need-to-know-ab9a2a91c7b5

