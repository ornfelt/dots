diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..fe89bbc
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,58 @@
+# Prerequisites
+*.d
+
+# Object files
+*.o
+*.ko
+*.obj
+*.elf
+
+# Linker output
+*.ilk
+*.map
+*.exp
+
+# Precompiled Headers
+*.gch
+*.pch
+
+# Libraries
+*.lib
+*.a
+*.la
+*.lo
+
+# Shared objects (inc. Windows DLLs)
+*.dll
+*.so
+*.so.*
+*.dylib
+
+# Executables
+*.exe
+*.out
+*.app
+*.i*86
+*.x86_64
+*.hex
+
+# Debug files
+*.dSYM/
+*.su
+*.idb
+*.pdb
+
+# Kernel Module Compile Results
+*.mod*
+*.cmd
+.tmp_versions/
+modules.order
+Module.symvers
+Mkfile.old
+dkms.conf
+a.out
+dmenu
+dmenu_path
+dmenu_run
+stest
+typescript
diff --git a/config.def.h b/config.def.h
index 1edb647..a3add5b 100644
--- a/config.def.h
+++ b/config.def.h
@@ -2,6 +2,9 @@
 /* Default settings; can be overriden by command line. */
 
 static int topbar = 1;                      /* -b  option; if 0, dmenu appears at bottom     */
+static int centered = 1;                    /* -c option; centers dmenu on screen */
+static int min_width = 500;                    /* minimum width when centered */
+static const float menu_height_ratio = 4.0f;  /* This is the ratio used in the original calculation */
 /* -fn option overrides fonts[0]; default X11 font or font set */
 static const char *fonts[] = {
 	"monospace:size=10"
@@ -9,9 +12,12 @@ static const char *fonts[] = {
 static const char *prompt      = NULL;      /* -p  option; prompt to the left of input field */
 static const char *colors[SchemeLast][2] = {
 	/*     fg         bg       */
-	[SchemeNorm] = { "#bbbbbb", "#222222" },
-	[SchemeSel] = { "#eeeeee", "#005577" },
-	[SchemeOut] = { "#000000", "#00ffff" },
+	[SchemeNorm] = { "#ebdbb2", "#282828" },
+	[SchemeSel] = { "#ebdbb2", "#98971a" },
+	[SchemeSelHighlight] = { "#ffc978", "#005577" },
+	[SchemeNormHighlight] = { "#ffc978", "#222222" },
+	[SchemeOut] = { "#ebdbb2", "#8ec07c" },
+	[SchemeOutHighlight] = { "#ffc978", "#00ffff" },
 };
 /* -l option; if nonzero, dmenu uses vertical list with given number of lines */
 static unsigned int lines      = 0;
@@ -21,3 +27,6 @@ static unsigned int lines      = 0;
  * for example: " /?\"&[]"
  */
 static const char worddelimiters[] = " ";
+
+/* Size of the window border */
+static unsigned int border_width = 0;
diff --git a/config.h b/config.h
new file mode 100644
index 0000000..181f342
--- /dev/null
+++ b/config.h
@@ -0,0 +1,35 @@
+/* See LICENSE file for copyright and license details. */
+/* Default settings; can be overriden by command line. */
+
+static int topbar = 1;                      /* -b  option; if 0, dmenu appears at bottom     */
+static int centered = 1;                    /* -c option; centers dmenu on screen */
+static int min_width = 500;                    /* minimum width when centered */
+static int max_width = 1200;                   /* maximum width when centered */
+static const float menu_height_ratio = 4.0f;  /* This is the ratio used in the original calculation */
+/* -fn option overrides fonts[0]; default X11 font or font set */
+//static const char *fonts[] = {
+//	"monospace:size=10"
+//};
+static const char *fonts[] = { "JetBrainsMono Nerd Font:size=11:style=bold" };
+static const char *prompt      = NULL;      /* -p  option; prompt to the left of input field */
+static const char *colors[SchemeLast][2] = {
+	/*     fg         bg       */
+	[SchemeNorm] = { "#ebdbb2", "#282828" },
+    [SchemeSel] = { "#ebdbb2", "#458588" },
+    [SchemeSelHighlight] = { "#d79921", "#458588" },
+    [SchemeNormHighlight] = { "#d79921", "#282828" },
+	[SchemeOut] = { "#ebdbb2", "#8ec07c" },
+    [SchemeOutHighlight] = { "#83a598", "#458588" },
+};
+
+/* -l option; if nonzero, dmenu uses vertical list with given number of lines */
+static unsigned int lines      = 0;
+
+/*
+ * Characters not considered part of a word while deleting words
+ * for example: " /?\"&[]"
+ */
+static const char worddelimiters[] = " ";
+
+/* Size of the window border */
+static unsigned int border_width = 0;
diff --git a/dmenu.1 b/dmenu.1
index 323f93c..c036baa 100644
--- a/dmenu.1
+++ b/dmenu.1
@@ -40,6 +40,9 @@ which lists programs in the user's $PATH and runs the result in their $SHELL.
 .B \-b
 dmenu appears at the bottom of the screen.
 .TP
+.B \-c
+dmenu appears centered on the screen.
+.TP
 .B \-f
 dmenu grabs the keyboard before reading stdin if not reading from a tty. This
 is faster, but will lock up X until stdin reaches end\-of\-file.
diff --git a/dmenu.c b/dmenu.c
index 804da64..8e381ec 100644
--- a/dmenu.c
+++ b/dmenu.c
@@ -25,8 +25,7 @@
 #define TEXTW(X)              (drw_fontset_getwidth(drw, (X)) + lrpad)
 
 /* enums */
-enum { SchemeNorm, SchemeSel, SchemeOut, SchemeLast }; /* color schemes */
-
+enum { SchemeNorm, SchemeSel, SchemeOut, SchemeNormHighlight, SchemeSelHighlight, SchemeOutHighlight, SchemeLast }; /* color schemes */
 struct item {
 	char *text;
 	struct item *left, *right;
@@ -95,6 +94,16 @@ calcoffsets(void)
 			break;
 }
 
+static int
+max_textw(void)
+{
+	int len = 0;
+	for (struct item *item = items; item && item->text; item++)
+		//len = MAX(TEXTW(item->text), len);
+        len = MIN(MAX(TEXTW(item->text), len), max_width);
+	return len;
+}
+
 static void
 cleanup(void)
 {
@@ -129,6 +138,43 @@ cistrstr(const char *h, const char *n)
 	return NULL;
 }
 
+static void
+drawhighlights(struct item *item, int x, int y, int maxw)
+{
+	char restorechar, tokens[sizeof text], *highlight,  *token;
+	int indentx, highlightlen;
+
+	drw_setscheme(drw, scheme[item == sel ? SchemeSelHighlight : item->out ? SchemeOutHighlight : SchemeNormHighlight]);
+	strcpy(tokens, text);
+	for (token = strtok(tokens, " "); token; token = strtok(NULL, " ")) {
+		highlight = fstrstr(item->text, token);
+		while (highlight) {
+			// Move item str end, calc width for highlight indent, & restore
+			highlightlen = highlight - item->text;
+			restorechar = *highlight;
+			item->text[highlightlen] = '\0';
+			indentx = TEXTW(item->text);
+			item->text[highlightlen] = restorechar;
+
+			// Move highlight str end, draw highlight, & restore
+			restorechar = highlight[strlen(token)];
+			highlight[strlen(token)] = '\0';
+			if (indentx - (lrpad / 2) - 1 < maxw)
+				drw_text(
+					drw,
+					x + indentx - (lrpad / 2) - 1,
+					y,
+					MIN(maxw - indentx, TEXTW(highlight) - lrpad),
+					bh, 0, highlight, 0
+				);
+			highlight[strlen(token)] = restorechar;
+
+			if (strlen(highlight) - strlen(token) < strlen(token)) break;
+			highlight = fstrstr(highlight + strlen(token), token);
+		}
+	}
+}
+
 static int
 drawitem(struct item *item, int x, int y, int w)
 {
@@ -139,7 +185,9 @@ drawitem(struct item *item, int x, int y, int w)
 	else
 		drw_setscheme(drw, scheme[SchemeNorm]);
 
-	return drw_text(drw, x, y, w, bh, lrpad / 2, item->text, 0);
+	int r = drw_text(drw, x, y, w, bh, lrpad / 2, item->text, 0);
+	drawhighlights(item, x, y, w);
+	return r;
 }
 
 static void
@@ -636,6 +684,7 @@ setup(void)
 	bh = drw->fonts->h + 2;
 	lines = MAX(lines, 0);
 	mh = (lines + 1) * bh;
+	promptw = (prompt && *prompt) ? TEXTW(prompt) - lrpad / 4 : 0;
 #ifdef XINERAMA
 	i = 0;
 	if (parentwin == root && (info = XineramaQueryScreens(dpy, &n))) {
@@ -662,9 +711,17 @@ setup(void)
 				if (INTERSECT(x, y, 1, 1, info[i]) != 0)
 					break;
 
-		x = info[i].x_org;
-		y = info[i].y_org + (topbar ? 0 : info[i].height - mh);
-		mw = info[i].width;
+		if (centered) {
+			mw = MIN(MAX(max_textw() + promptw, min_width), info[i].width);
+            //mw = 900;
+			x = info[i].x_org + ((info[i].width  - mw) / 2);
+			y = info[i].y_org + ((info[i].height - mh) / menu_height_ratio);
+		} else {
+			x = info[i].x_org;
+			y = info[i].y_org + (topbar ? 0 : info[i].height - mh);
+			mw = info[i].width;
+		}
+
 		XFree(info);
 	} else
 #endif
@@ -672,9 +729,16 @@ setup(void)
 		if (!XGetWindowAttributes(dpy, parentwin, &wa))
 			die("could not get embedding window attributes: 0x%lx",
 			    parentwin);
-		x = 0;
-		y = topbar ? 0 : wa.height - mh;
-		mw = wa.width;
+
+		if (centered) {
+			mw = MIN(MAX(max_textw() + promptw, min_width), wa.width);
+			x = (wa.width  - mw) / 2;
+			y = (wa.height - mh) / 2;
+		} else {
+			x = 0;
+			y = topbar ? 0 : wa.height - mh;
+			mw = wa.width;
+		}
 	}
 	promptw = (prompt && *prompt) ? TEXTW(prompt) - lrpad / 4 : 0;
 	inputw = mw / 3; /* input width: ~33% of monitor width */
@@ -684,9 +748,11 @@ setup(void)
 	swa.override_redirect = True;
 	swa.background_pixel = scheme[SchemeNorm][ColBg].pixel;
 	swa.event_mask = ExposureMask | KeyPressMask | VisibilityChangeMask;
-	win = XCreateWindow(dpy, root, x, y, mw, mh, 0,
+	win = XCreateWindow(dpy, root, x, y, mw, mh, border_width,
 	                    CopyFromParent, CopyFromParent, CopyFromParent,
 	                    CWOverrideRedirect | CWBackPixel | CWEventMask, &swa);
+	if (border_width)
+		XSetWindowBorder(dpy, win, scheme[SchemeSel][ColBg].pixel);
 	XSetClassHint(dpy, win, &ch);
 
 	/* input methods */
@@ -733,6 +799,8 @@ main(int argc, char *argv[])
 			topbar = 0;
 		else if (!strcmp(argv[i], "-f"))   /* grabs keyboard before reading stdin */
 			fast = 1;
+		else if (!strcmp(argv[i], "-c"))   /* centers dmenu on screen */
+			centered = 1;
 		else if (!strcmp(argv[i], "-i")) { /* case-insensitive item matching */
 			fstrncmp = strncasecmp;
 			fstrstr = cistrstr;
@@ -757,6 +825,8 @@ main(int argc, char *argv[])
 			colors[SchemeSel][ColFg] = argv[++i];
 		else if (!strcmp(argv[i], "-w"))   /* embedding window id */
 			embed = argv[++i];
+		else if (!strcmp(argv[i], "-bw"))
+			border_width = atoi(argv[++i]); /* border width */
 		else
 			usage();
 
diff --git a/patches/get.sh b/patches/get.sh
new file mode 100755
index 0000000..0915b19
--- /dev/null
+++ b/patches/get.sh
@@ -0,0 +1,61 @@
+# Example
+# https://dwm.suckless.org/patches/alpha/
+# curl -O https://dwm.suckless.org/patches/alpha/dwm-alpha-20230401-348f655.diff
+# wget https://dwm.suckless.org/patches/alpha/dwm-alpha-20230401-348f655.diff
+# python -c "import urllib.request; urllib.request.urlretrieve('https://dwm.suckless.org/patches/alpha/dwm-alpha-20230401-348f655.diff', 'dwm-alpha-20230401-348f655.diff')"
+# exit 0
+
+download_if_not_exists() {
+  local url="$1"
+  local filename=$(basename "$url") # Extract the file name from the URL
+
+  # Check if the file already exists
+  if [[ -f "$filename" ]]; then
+    echo "File '$filename' already exists. Skipping download."
+  else
+    echo "Downloading '$filename'..."
+    curl -O "$url"
+    if [[ $? -eq 0 ]]; then
+      echo "Downloaded '$filename' successfully."
+    else
+      echo "Failed to download '$filename'."
+    fi
+  fi
+}
+
+# https://tools.suckless.org/dmenu/patches/xresources/
+#download_if_not_exists https://tools.suckless.org/dmenu/patches/xresources/dmenu-xresources-4.9.diff
+
+# https://tools.suckless.org/dmenu/patches/alpha/
+#download_if_not_exists https://tools.suckless.org/dmenu/patches/alpha/dmenu-alpha-20230110-5.2.diff
+
+# https://tools.suckless.org/dmenu/patches/gruvbox/
+download_if_not_exists https://tools.suckless.org/dmenu/patches/gruvbox/dmenu-gruvbox-20210329-9ae8ea5.diff
+
+# https://tools.suckless.org/dmenu/patches/mouse-support/
+#download_if_not_exists https://tools.suckless.org/dmenu/patches/mouse-support/dmenu-mousesupport-5.3.diff
+
+# https://tools.suckless.org/dmenu/patches/emoji-highlight/
+#download_if_not_exists https://tools.suckless.org/dmenu/patches/emoji-highlight/dmenu-emoji-highlight-5.0.diff
+
+# https://tools.suckless.org/dmenu/patches/bar_height/
+#download_if_not_exists https://tools.suckless.org/dmenu/patches/bar_height/dmenu-bar-height-5.2.diff
+
+# https://tools.suckless.org/dmenu/patches/border/
+download_if_not_exists https://tools.suckless.org/dmenu/patches/border/dmenu-border-20230512-0fe460d.diff
+
+# https://tools.suckless.org/dmenu/patches/center/
+download_if_not_exists https://tools.suckless.org/dmenu/patches/center/dmenu-center-20240616-36c3d68.diff
+
+# https://tools.suckless.org/dmenu/patches/highlight/
+download_if_not_exists https://tools.suckless.org/dmenu/patches/highlight/dmenu-highlight-20201211-fcdc159.diff
+
+# https://tools.suckless.org/dmenu/patches/fuzzyhighlight/
+#download_if_not_exists https://tools.suckless.org/dmenu/patches/fuzzyhighlight/dmenu-fuzzyhighlight-5.3.diff
+
+# https://tools.suckless.org/dmenu/patches/fuzzymatch/
+#download_if_not_exists https://tools.suckless.org/dmenu/patches/fuzzymatch/dmenu-fuzzymatch-5.3.diff
+
+# https://tools.suckless.org/dmenu/patches/vi-mode/
+#download_if_not_exists https://tools.suckless.org/dmenu/patches/vi-mode/dmenu-vi_mode-20230416-0fe460d.diff
+
