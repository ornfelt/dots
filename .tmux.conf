# https://github.com/tmux-plugins/tmux-sensible
# Required for removing delay when pressing escape
set -sg escape-time 0

# Increase scrollback buffer size from 2000 to 50000 lines
set -g history-limit 50000

# Increase tmux messages display duration from 750ms to 4s
#set -g display-time 4000

# Refresh 'status-left' and 'status-right' more often, from every 15s to 5s
set -g status-interval 5

# Upgrade $TERM
set -g default-terminal "screen-256color"

# Emacs key bindings in tmux command prompt (prefix + :) are better than
# vi keys, even for vim users
set -g status-keys emacs

# Focus events enabled for terminals that support them
set -g focus-events on

# Super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on

# Allow automatic renaming of windows
set -g allow-rename on

# Allow tmux to set the terminal title
#set -g set-titles on

################################
# Keybinds
###############################

# Changing ctrl b to ctrl a as the command button
# unbind C-b
set -g prefix C-a
#set -g prefix C-b

# Send prefix to a nested tmux session by doubling the prefix
bind C-a send-prefix

# Set first window to index 1 (not 0) to map more to the keyboard layout
set -g base-index 1
set -g pane-base-index 1
setw -g pane-base-index 1

# Reload tmux config with leader + r
unbind r
bind r \
	source-file ~/.tmux.conf \;\
		display 'Reloaded tmux config.'

# New window
unbind t
bind-key t new-window
#unbind C-t
#bind-key C-t new-window

# Kill pane
unbind q
bind-key q kill-pane
#unbind C-q
#bind-key C-q kill-pane

# Kill session
unbind Q
bind-key Q kill-session
#unbind C-Q
#bind-key C-Q kill-session

# New session
unbind n
bind-key n new-session
#unbind C-n
#bind-key C-n new-session

# Copy-mode-vi settings
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle \; send -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel
# Copy from tmux to system clipboard (requires xclip)
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"

# Allow the mouse to resize windows and select tabs
set -g mouse on
#set mouse on
set-window-option -g mode-keys vi
#set-window-option mode-keys vi
#setw -g mode-keys vi

bind -r v copy-mode

# vim-like pane switching (-r for allowing repeat)
bind -r ^ last-window
bind -r k select-pane -U
bind -r j select-pane -D
bind -r h select-pane -L
bind -r l select-pane -R

###
# Navigating panes
###
# Navigate panes with Alt-h/j/k/l without prefix
#bind-key -n M-h select-pane -L
#bind-key -n M-j select-pane -D
#bind-key -n M-k select-pane -U
#bind-key -n M-l select-pane -R

# Smart pane switching with awareness of Vim splits.
# This is a customized version of vim-tmux-navigator:
# https://github.com/christoomey/vim-tmux-navigator

# Check if the process is a Vim-like editor
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"

# Check if active window has only one pane
is_single_pane="[ \"\$(tmux list-panes -F '#{window_active}' | grep -c '^1$')\" -eq 1 ]"
# Test: tmux list-panes -F '#{window_active}' | grep -c '^1$'
# Also see: tmux list-windows

## Navigate panes with Alt+h/j/k/l
#bind-key -n 'M-h' if-shell "$is_vim && $is_single_pane" 'send-keys M-h' 'select-pane -L'
#bind-key -n 'M-j' if-shell "$is_vim && $is_single_pane" 'send-keys M-j' 'select-pane -D'
#bind-key -n 'M-k' if-shell "$is_vim && $is_single_pane" 'send-keys M-k' 'select-pane -U'
#bind-key -n 'M-l' if-shell "$is_vim && $is_single_pane" 'send-keys M-l' 'select-pane -R'

# Handle `M-\` (backslash)
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'M-\\' if-shell \"$is_vim && $is_single_pane\" 'send-keys M-\\'  ''"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'M-\\' if-shell \"$is_vim && $is_single_pane\" 'send-keys M-\\\\'  ''"

# Check if the current pane is zoomed
is_zoomed="tmux list-panes -F '#F' | grep -q 'Z'"
# Test: tmux list-panes -F '#F' 
# Test: tmux list-panes -F '#F' | grep -q 'Z' && echo "Zoomed" || echo "Not Zoomed"

# Combine zoom or single pane checks
is_zoom_or_single="($is_single_pane || $is_zoomed)"

# Checking both zoom and sigle pane
#bind-key -n 'M-h' if-shell "$is_vim && $is_zoom_or_single" 'send-keys M-h' 'select-pane -L'
#bind-key -n 'M-j' if-shell "$is_vim && $is_zoom_or_single" 'send-keys M-j' 'select-pane -D'
#bind-key -n 'M-k' if-shell "$is_vim && $is_zoom_or_single" 'send-keys M-k' 'select-pane -U'
#bind-key -n 'M-l' if-shell "$is_vim && $is_zoom_or_single" 'send-keys M-l' 'select-pane -R'

# Navigate pane if it exists in given direction and NOT zoomed, otherwise send to nvim
bind -n M-h run-shell "$HOME/.local/bin/my_scripts/tmux_vim_nav.sh h"
bind -n M-j run-shell "$HOME/.local/bin/my_scripts/tmux_vim_nav.sh j"
bind -n M-k run-shell "$HOME/.local/bin/my_scripts/tmux_vim_nav.sh k"
bind -n M-l run-shell "$HOME/.local/bin/my_scripts/tmux_vim_nav.sh l"
# Test: see $HOME/.local/bin/my_scripts/tmux_test.sh

# These also work as replacement for above script...
#bind -n M-k run-shell "if [ \$(tmux display-message -p '#{pane_at_top}') -eq 0 ] && ! tmux list-panes -F '#F' | grep -q 'Z'; then tmux select-pane -U; else tmux send-keys C-w k; fi"
#bind -n M-j run-shell "if [ \$(tmux display-message -p '#{pane_at_bottom}') -eq 0 ] && ! tmux list-panes -F '#F' | grep -q 'Z'; then tmux select-pane -D; else tmux send-keys C-w j; fi"
#bind -n M-l run-shell "if [ \$(tmux display-message -p '#{pane_at_right}') -eq 0 ] && ! tmux list-panes -F '#F' | grep -q 'Z'; then tmux select-pane -R; else tmux send-keys C-w l; fi"
#bind -n M-h run-shell "if [ \$(tmux display-message -p '#{pane_at_left}') -eq 0 ] && ! tmux list-panes -F '#F' | grep -q 'Z'; then tmux select-pane -L; else tmux send-keys C-w h; fi"

# Using if-shell:
#bind -n M-k if-shell "[ \"\$(tmux display-message -p '#{pane_at_top}')\" = '0' ] && ! tmux list-panes -F '#F' | grep -q 'Z'" \
#    'select-pane -U' \
#    'send-keys C-w k'
#
#bind -n M-j if-shell "[ \"\$(tmux display-message -p '#{pane_at_bottom}')\" = '0' ] && ! tmux list-panes -F '#F' | grep -q 'Z'" \
#    'select-pane -D' \
#    'send-keys C-w j'
#
#bind -n M-l if-shell "[ \"\$(tmux display-message -p '#{pane_at_right}')\" = '0' ] && ! tmux list-panes -F '#F' | grep -q 'Z'" \
#    'select-pane -R' \
#    'send-keys C-w l'
#
#bind -n M-h if-shell "[ \"\$(tmux display-message -p '#{pane_at_left}')\" = '0' ] && ! tmux list-panes -F '#F' | grep -q 'Z'" \
#    'select-pane -L' \
#    'send-keys C-w h'

# Check both directions
#bind -n M-k run-shell "if ([ \$(tmux display-message -p '#{pane_at_top}') -eq 0 ] || [ \$(tmux display-message -p '#{pane_at_bottom}') -eq 0 ]) && ! tmux list-panes -F '#F' | grep -q 'Z'; then tmux select-pane -U; else tmux send-keys C-w k; fi"
#bind -n M-j run-shell "if ([ \$(tmux display-message -p '#{pane_at_bottom}') -eq 0 ] || [ \$(tmux display-message -p '#{pane_at_top}') -eq 0 ]) && ! tmux list-panes -F '#F' | grep -q 'Z'; then tmux select-pane -D; else tmux send-keys C-w j; fi"
#bind -n M-l run-shell "if ([ \$(tmux display-message -p '#{pane_at_right}') -eq 0 ] || [ \$(tmux display-message -p '#{pane_at_left}') -eq 0 ]) && ! tmux list-panes -F '#F' | grep -q 'Z'; then tmux select-pane -R; else tmux send-keys C-w l; fi"
#bind -n M-h run-shell "if ([ \$(tmux display-message -p '#{pane_at_left}') -eq 0 ] || [ \$(tmux display-message -p '#{pane_at_right}') -eq 0 ]) && ! tmux list-panes -F '#F' | grep -q 'Z'; then tmux select-pane -L; else tmux send-keys C-w h; fi"

# Using if-shell:
#bind -n M-k if-shell "([ \"\$(tmux display-message -p '#{pane_at_top}')\" -eq 0 ] || [ \"\$(tmux display-message -p '#{pane_at_bottom}')\" -eq 0 ]) && ! tmux list-panes -F '#F' | grep -q 'Z'" \
#    'select-pane -U' \
#    'send-keys C-w k'
#
#bind -n M-j if-shell "([ \"\$(tmux display-message -p '#{pane_at_bottom}')\" -eq 0 ] || [ \"\$(tmux display-message -p '#{pane_at_top}')\" -eq 0 ]) && ! tmux list-panes -F '#F' | grep -q 'Z'" \
#    'select-pane -D' \
#    'send-keys C-w j'
#
#bind -n M-l if-shell "([ \"\$(tmux display-message -p '#{pane_at_right}')\" -eq 0 ] || [ \"\$(tmux display-message -p '#{pane_at_left}')\" -eq 0 ]) && ! tmux list-panes -F '#F' | grep -q 'Z'" \
#    'select-pane -R' \
#    'send-keys C-w l'
#
#bind -n M-h if-shell "([ \"\$(tmux display-message -p '#{pane_at_left}')\" -eq 0 ] || [ \"\$(tmux display-message -p '#{pane_at_right}')\" -eq 0 ]) && ! tmux list-panes -F '#F' | grep -q 'Z'" \
#    'select-pane -L' \
#    'send-keys C-w h'

###
# Resizing panes
###
#bind-key -n M-y resize-pane -L 5
#bind-key -n M-i resize-pane -U 5
#bind-key -n M-u resize-pane -D 5
#bind-key -n M-o resize-pane -R 5
#bind-key -T copy-mode-vi 'M-h' select-pane -L
#bind-key -T copy-mode-vi 'M-j' select-pane -D
#bind-key -T copy-mode-vi 'M-k' select-pane -U
#bind-key -T copy-mode-vi 'M-l' select-pane -R
#bind-key -T copy-mode-vi 'M-\' select-pane -l

#bind-key -n M-y if-shell "$is_vim && $is_single_pane" 'send-keys M-y' 'resize-pane -L 5'
#bind-key -n M-i if-shell "$is_vim && $is_single_pane" 'send-keys M-i' 'resize-pane -U 5'
#bind-key -n M-u if-shell "$is_vim && $is_single_pane" 'send-keys M-u' 'resize-pane -D 5'
#bind-key -n M-o if-shell "$is_vim && $is_single_pane" 'send-keys M-o' 'resize-pane -R 5'

#bind-key -n M-y if-shell "$is_vim && $is_zoom_or_single" 'send-keys M-y' 'resize-pane -L 5'
#bind-key -n M-i if-shell "$is_vim && $is_zoom_or_single" 'send-keys M-i' 'resize-pane -U 5'
#bind-key -n M-u if-shell "$is_vim && $is_zoom_or_single" 'send-keys M-u' 'resize-pane -D 5'
#bind-key -n M-o if-shell "$is_vim && $is_zoom_or_single" 'send-keys M-o' 'resize-pane -R 5'

#bind -n M-y run-shell "if [ \$(tmux display-message -p '#{pane_at_right}') -eq 0 ] && ! tmux list-panes -F '#F' | grep -q 'Z'; then tmux resize-pane -L 5; else tmux send-keys M-c-y; fi"
#bind -n M-i run-shell "if [ \$(tmux display-message -p '#{pane_at_top}') -eq 0 ] && ! tmux list-panes -F '#F' | grep -q 'Z'; then tmux resize-pane -U 5; else tmux send-keys M-c-i; fi"
#bind -n M-u run-shell "if [ \$(tmux display-message -p '#{pane_at_bottom}') -eq 0 ] && ! tmux list-panes -F '#F' | grep -q 'Z'; then tmux resize-pane -D 5; else tmux send-keys M-c-u; fi"
#bind -n M-o run-shell "if [ \$(tmux display-message -p '#{pane_at_left}') -eq 0 ] && ! tmux list-panes -F '#F' | grep -q 'Z'; then tmux resize-pane -R 5; else tmux send-keys M-c-o; fi"
bind -n M-y run-shell "if ([ \$(tmux display-message -p '#{pane_at_right}') -eq 0 ] || [ \$(tmux display-message -p '#{pane_at_left}') -eq 0 ]) && ! tmux list-panes -F '#F' | grep -q 'Z'; then tmux resize-pane -L 5; else tmux send-keys M-c-y; fi"
bind -n M-i run-shell "if ([ \$(tmux display-message -p '#{pane_at_top}') -eq 0 ] || [ \$(tmux display-message -p '#{pane_at_bottom}') -eq 0 ]) && ! tmux list-panes -F '#F' | grep -q 'Z'; then tmux resize-pane -U 5; else tmux send-keys M-c-i; fi"
bind -n M-u run-shell "if ([ \$(tmux display-message -p '#{pane_at_bottom}') -eq 0 ] || [ \$(tmux display-message -p '#{pane_at_top}') -eq 0 ]) && ! tmux list-panes -F '#F' | grep -q 'Z'; then tmux resize-pane -D 5; else tmux send-keys M-c-u; fi"
bind -n M-o run-shell "if ([ \$(tmux display-message -p '#{pane_at_left}') -eq 0 ] || [ \$(tmux display-message -p '#{pane_at_right}') -eq 0 ]) && ! tmux list-panes -F '#F' | grep -q 'Z'; then tmux resize-pane -R 5; else tmux send-keys M-c-o; fi"

# Swap panes
bind-key -n M-H swap-pane -U
bind-key -n M-L swap-pane -D

# Pane splits
unbind enter
bind-key enter split-window -h

unbind <
bind-key < split-window

unbind L
bind-key L choose-tree

unbind s
bind-key s list-sessions

#set status-style "bg=cyan"
#set -g status-bg colour6
#set status-bg colour66
#set status-fg colour231
#set status-right '#H'

# For hybrid colorscheme
# set -g status-bg colour66
# set -g status-fg colour231

# For gruvbox colorscheme
#set -g status-bg colour3
#set -g status-fg colour232
#set -g status-right '#H'

set -g message-style fg='#ebdbb2',bold,bg='#282828'
set-option -g status-fg '#ebdbb2'
#set-option -g status-bg '#282828'
set -g status-style fg='#ebdbb2',bg=default 

# Transparent status bg
#set status-bg default
#set-option -g status-style bg=default
#set-option -g status-style bg='#282828'

# leader - b to toggle status bar
# c-b conflicts with wezterm leader (if using both tmux and wezterm)
#unbind b
unbind C-b
#bind-key b set -g status
#bind-key C-b set -g status
bind-key M-b set -g status

# Disable status bar by default
# set -g status off

# Status line customisation
#set-option -g status-left-length 200
set-option -g status-left " #{session_name}  "
# add git branch to status line
set-option -g status-style "bg=default"
set -g status-right "#(cd #{pane_current_path} && git rev-parse --abbrev-ref HEAD 2>/dev/null || hostname)"
set-option -g window-status-format "#{window_index}:#{window_name}#{window_flags} " 
set-option -g window-status-current-format "#{window_index}:#{window_name}#{window_flags} "
#set-option -g window-status-current-style "fg=#e1a345" 
#set-option -g window-status-last-style "fg=#936a2e"
#set-option -g window-status-current-style "fg=#458588" 
set-option -g window-status-current-style "fg=#8ec07c" 
set-option -g window-status-last-style none
set-option -g window-status-activity-style none

# set -g status-justify centre
set -g status-justify left

# TODO: naming session bind...
# leader-, for renaming window
# tmux rename-session coding

# TODO: integrate sessions saved with ressurect and name them according to project dir...
# See session at:
# /home/jonas/.local/share/tmux/resurrect/tmux_resurrect_20241201T182255.txt
# search sessions
bind C-e display-popup -E "\
    tmux list-sessions -F '#{?session_attached,,#{session_name}}' |\
    sed '/^$/d' |\
    fzf --reverse --header jump-to-session |\
    xargs tmux switch-client -t"

# search windows in current session
bind C-f display-popup -E "\
    tmux list-windows -F '#{window_index} #{window_name}' |\
    sed '/^$/d' |\
    fzf --reverse --header jump-to-window |\
    cut -d ' ' -f 1 |\
    xargs tmux select-window -t"

# Move tmux status bar to top
bind-key C-k run-shell "tmux set-option -g status-position top;"
# Move tmux status bar to bottom
bind-key C-j run-shell "tmux set-option -g status-position bottom;"

######
# Open an application in a new window with prefix+o, and allow me to provide the app name
#bind-key o command-prompt -p "open app: " "new-window '%%'"

# Show a promp to kill a window by id with prefix+X
#bind-key X command-prompt -p "kill window: " "kill-window -t '%%'"

#bind -r N run-shell "tmux swap-window -t $(expr $(tmux list-windows | grep \"(active)\" | cut -d \":\" -f 1) + 1)"
#bind -r P run-shell "tmux swap-window -t $(expr $(tmux list-windows | grep \"(active)\" | cut -d \":\" -f 1) - 1)"

# Switch between two most recently used windows
#bind Space last-window

# Switch between two most recently used sessions
#bind b switch-client -l

# Enable clipboard integration (for terminals that support it)
#set -g set-clipboard on

# Restore screen when exiting an interactive application
#setw -g alternate-screen on

# Explicitly enable vi modes
#set -g mode-keys vi
#set -g status-keys vi
#set -g escape-time 50

# Enable undercurl and true color (when using alacritty)
#if -F "#{==:$TERM,alacritty}" {
#  set -g default-terminal "alacritty"
#  set -ga terminal-features ",alacritty:RGB:usstyle"
#}

# Enable statusbar only, if there are multiple tabs (https://redd.it/6lwb07)
#if -F "#{==:#{session_windows},1}" "set -g status off" "set -g status on"
#set-hook -g window-linked 'if -F "#{==:#{session_windows},1}" \
#  "set -g status off" "set -g status on"'
#set-hook -g window-unlinked 'if -F "#{==:#{session_windows},1}" \
#  "set -g status off" "set -g status on"'

######

# TPM initialization (plugin manager)
set -g @plugin 'tmux-plugins/tpm'
#set -g @plugin 'tmux-plugins/tmux-continuum'
#set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'sainnhe/tmux-fzf'
set -g @plugin 'tmux-plugins/tmux-resurrect'

# Session binds
unbind m
unbind .
# hmmm...
# tmux list-keys | grep C-m
bind-key C-m display-message "Ctrl-m was pressed"

#set -g @resurrect-save 'm'
#set -g @resurrect-restore '.'

# Bind custom keys for tmux-resurrect
bind m run-shell '~/.tmux/plugins/tmux-resurrect/scripts/save.sh'
bind . run-shell '~/.tmux/plugins/tmux-resurrect/scripts/restore.sh'

# Cycle window
bind-key -n C-Tab next-window
bind-key -n C-S-Tab previous-window

# Initialize TPM (keep at bottom of config)
run '~/.tmux/plugins/tpm/tpm'

